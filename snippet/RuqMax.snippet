<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>RuqMax</Title>
      <Shortcut>RuqMax</Shortcut>
      <Description>遅延評価セグメント木(区間更新、最大値)</Description>
      <Author></Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false"></Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[struct LazySegmentTree
{
private:
    static const long long INF = 1LL << 30;
    long long n;
    vector<long long> node, lazy;

    void eval(long long k, long long l, long long r)
    {
        if (lazy[k] != 0)
        {
            node[k] = max(node[k], lazy[k]);
            if (r - l > 1)
            {
                lazy[2 * k + 1] = max(lazy[2 * k + 1], lazy[k]);
                lazy[2 * k + 2] = max(lazy[2 * k + 2], lazy[k]);
            }
            lazy[k] = 0;
        }
        return;
    }
public:
    LazySegmentTree(vector<long long> v)
    {
        long long sz = (long long)v.size();
        n = 1;
        while (n < sz) n *= 2;
        node.resize(2 * n - 1, -INF);
        lazy.resize(2 * n - 1, 0);
        for (long long i = 0; i < sz; ++i) node[i + n - 1] = v[i];
        for (long long i = n - 2; i >= 0; --i) node[i] = max(node[2 * i + 1], node[2 * i + 2]);
    }

    void update(long long a, long long b, long long x, long long k = 0, long long l = 0, long long r = -1)
    {
        if (r < 0) r = n;

        eval(k, l, r);

        if (r <= a || b <= l) return;
        if (a <= l && r <= b)
        {
            lazy[k] = x;
            eval(k, l, r);
        }
        else
        {
            update(a, b, x, 2 * k + 1, l, (l + r) / 2);
            update(a, b, x, 2 * k + 2, (l + r) / 2, r);
            node[k] = max(node[2 * k + 1], node[2 * k + 2]);
        }
        return;
    }

    long long range_max(long long a, long long b, long long k = 0, long long l = 0, long long r = -1)
    {
        if (r < 0) r = n;
        eval(k, l, r);
        if (r <= a || b <= l) return -INF;
        if (a <= l && r <= b) return node[k];
        long long vl = range_max(a, b, 2 * k + 1, l, (l + r) / 2);
        long long vr = range_max(a, b, 2 * k + 2, (l + r) / 2, r);
        return max(vl, vr);
    }
};
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>